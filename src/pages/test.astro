---
import Layout from '../layouts/Layout.astro';
import "../styles/global.css";
---

<Layout>
  <main class="container mx-auto p-6 max-w-2xl">
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8">
      <h1 class="text-4xl font-bold text-gray-900 dark:text-white text-center">
        Stellar Wallet Connection
      </h1>
      
      <p class="mt-4 text-gray-600 dark:text-gray-300 text-center">
        Connect your Stellar wallet to get started
      </p>

      <div class="mt-8 flex flex-col items-center gap-4">
        <div id="containerDiv"></div>
        
        <div id="walletInfo" class="hidden w-full">
          <div class="mt-6 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
            <h2 class="text-lg font-semibold text-gray-900 dark:text-white">Connected Wallet</h2>
            <p id="walletAddress" class="mt-2 font-mono text-sm text-gray-600 dark:text-gray-300 break-all"></p>
          </div>
        </div>

        <div id="loadingState" class="hidden mt-4">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 dark:border-white"></div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
if (typeof window !== 'undefined') {
  window.global = globalThis;
}

import {
  StellarWalletsKit,
  WalletNetwork,
  allowAllModules,
  XBULL_ID
} from '@creit.tech/stellar-wallets-kit';

const kit = new StellarWalletsKit({
  network: WalletNetwork.TESTNET,
  selectedWalletId: XBULL_ID,
  modules: allowAllModules(),
});

async function setupWallet() {
  const container = document.querySelector('#containerDiv') as HTMLElement;
  const walletInfo = document.querySelector('#walletInfo') as HTMLElement;
  const walletAddress = document.querySelector('#walletAddress') as HTMLElement;
  const loadingState = document.querySelector('#loadingState') as HTMLElement;

  if (container) {
    await kit.createButton({
      container,
      onConnect: (result: { address: string }) => {
        console.log('Connected wallet address:', result.address);
        loadingState.classList.add('hidden');
        walletInfo.classList.remove('hidden');
        walletAddress.textContent = result.address;
      },
      onDisconnect: () => {
        console.log('Wallet disconnected');
        walletInfo.classList.add('hidden');
        walletAddress.textContent = '';
      }
    });
  }
}

// Initialize the wallet connection
setupWallet().catch(err => console.error('Failed to setup wallet:', err));
</script>